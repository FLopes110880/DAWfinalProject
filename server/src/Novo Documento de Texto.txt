import path from "path";
import express, {Express, NextFunction, Request, response, Response} from "express";
import * as User from "./User";
import {Teams} from "./User";
import Axios from "axios"

const app : Express = express();

//app.use() function is used to mount the specified middleware function(s) at the path which is being specified
//adiciona middleware/funcionalidades, neste caso adiciona a funcao json() ao express
app.use(express.json());

//endpoint "/"
//express.static() - To serve static files such as images, CSS files, and JavaScript files
//path.join() - junta os dois argumentos e poe normal o resultado do caminho para irmos buscar um ficheiro estatico a nossa maquina
//__dirname - e o caminho da pasta atual
app.use("/", express.static(path.join (__dirname, "../../client/dist")));


//esta funcao adiciona os headers necessarios a resposta
//inNext() - passa a proxima funcao que esta em stack do middleware
app.use(function(inRequest: Request, inResponse: Response, inNext : NextFunction ) {
    inResponse.header("Access-Control-Allow-Origin", "*");
    inResponse.header("Access-Control-Allow-Methods", "GET,POST,DELETE,OPTIONS");
    inResponse.header("Access-Control-Allow-Headers", "Origin,X-Requested-With,Content-Type,Accept");
    inNext();
});

app.post("/addTeams", async (inRequest: Request, inResponse: Response) => {
    try {
        console.log("pilinha1")
        const user: User.UserService = new User.UserService()
        await user.addLikedTeam(inRequest.body)
        console.log("pilinha2")
        inResponse.json(inRequest.body)
    }
    catch (error) {
        console.error(error)
    }
})

// app.get("/user", async (inRequest: Request ,inResponse: Response ) => {
//     try {
//         const allUsers: User.UserService = new User.UserService();
//         //fica a espera que os contactos sejam listados
//         //contactsWorker.listContacts() - retorna em objetos os contactos que estao disponiveis na base de dados
//         const contacts: IUser[] = await allUsers.listUser();
//         inResponse.json(contacts); // serialize object into JSON
//     } catch (inError) {
//         inResponse.send ("error") ;
//     }
// });

app.delete("/contacts/:id", async (inRequest: Request, inResponse: Response) => {
    try {
        const userDelete: User.UserService = new User.UserService();
        //contactsWorker.deleteContact() - elimina o contacto com um certo id da base de dados
        await userDelete.deleteUser(inRequest.params.id);
        inResponse.send("ok");
    } catch ( inError ) {
        inResponse.send("error") ;
    }
});

// app.get("/updateUser", async (inRequest: Request ,inResponse: Response ) => {
//     try {
//         const allUsers: User.Users = new User.Users();
//         //fica a espera que os contactos sejam listados
//         //contactsWorker.listContacts() - retorna em objetos os contactos que estao disponiveis na base de dados
//         const contacts: IUser[] = await allUsers.addTeamFav("1", "1");
//         inResponse.json(contacts); // serialize object into JSON
//     } catch (inError) {
//         inResponse.send ("error") ;
//     }
// });

app.listen(8080, () => console.log("listening"))

